create the functions and all that is needed "this is students table "CREATE TABLE students (
  id int(10) unsigned NOT NULL AUTO_INCREMENT,
  user_id int(11) DEFAULT NULL,
  username varchar(255) NOT NULL,
  password varchar(255) NOT NULL,
  title varchar(20) DEFAULT NULL,
  surname varchar(70) NOT NULL,
  first_name varchar(70) NOT NULL,
  middle_name varchar(70) DEFAULT NULL,
  gender varchar(20) NOT NULL,
  dob varchar(20) NOT NULL,
  nationality varchar(20) DEFAULT NULL,
  state varchar(50) NOT NULL,
  lga_name varchar(50) NOT NULL,
  city varchar(30) DEFAULT NULL,
  religion varchar(40) DEFAULT NULL,
  marital_status varchar(20) DEFAULT NULL,
  address varchar(200) NOT NULL,
  phone varchar(20) NOT NULL,
  email varchar(50) NOT NULL,
  passport longblob NOT NULL,
  signature longblob NOT NULL,
  hobbies varchar(300) DEFAULT NULL,
  status varchar(20) NOT NULL,
  remember_token varchar(255) DEFAULT NULL,
  created_at timestamp NULL DEFAULT NULL,
  updated_at timestamp NULL DEFAULT NULL,
  PRIMARY KEY (id),
  KEY surname (surname),
  KEY surname_2 (surname),
  KEY first_name (first_name),
  KEY middle_name (middle_name),
  KEY phone (phone)
) ENGINE=InnoDB AUTO_INCREMENT=10010 DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci;" this is student_academics table "CREATE TABLE student_academicss (
  id int(20) NOT NULL AUTO_INCREMENT,
  student_id int(20) NOT NULL,
  mode_of_entry varchar(25) NOT NULL,
  mode_of_study varchar(10) NOT NULL,
  matric_no varchar(200) DEFAULT NULL,
  program_id int(11) unsigned NOT NULL,
  level int(20) DEFAULT NULL,
  entry_session_id int(11) unsigned NOT NULL,
  semester int(20) DEFAULT NULL,
  first_semester_load float NOT NULL DEFAULT 100,
  second_semester_load float NOT NULL DEFAULT 100,
  program_type varchar(50) DEFAULT NULL,
  TC int(10) NOT NULL DEFAULT 0,
  TGP int(10) NOT NULL DEFAULT 0,
  status int(11) NOT NULL DEFAULT 1,
  created_at timestamp NULL DEFAULT NULL,
  updated_at timestamp NULL DEFAULT NULL,
  PRIMARY KEY (id),
  KEY matric_no (matric_no)
) ENGINE=InnoDB AUTO_INCREMENT=25 DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci;" and this is staff table "CREATE TABLE staff (
  id int(11) unsigned NOT NULL AUTO_INCREMENT,
  first_name varchar(50) NOT NULL,
  surname varchar(50) NOT NULL,
  middle_name varchar(50) DEFAULT NULL,
  maiden_name varchar(50) DEFAULT NULL,
  dob varchar(20) NOT NULL,
  title varchar(10) NOT NULL,
  nationality varchar(50) NOT NULL,
  state varchar(30) NOT NULL,
  lga_name varchar(30) DEFAULT NULL,
  address varchar(200) NOT NULL,
  city varchar(30) NOT NULL,
  religion varchar(30) NOT NULL,
  phone varchar(20) NOT NULL,
  email varchar(50) DEFAULT NULL,
  marital_status varchar(20) NOT NULL,
  gender enum('Male','Female') NOT NULL,
  passport longblob NOT NULL,
  signature longblob NOT NULL,
  username varchar(255) NOT NULL,
  password varchar(255) NOT NULL,
  status tinyint(1) DEFAULT 1,
  created_at timestamp NULL DEFAULT NULL,
  updated_at timestamp NULL DEFAULT NULL,
  remember_token varchar(255) DEFAULT NULL,
  PRIMARY KEY (id)
) ENGINE=InnoDB AUTO_INCREMENT=507 DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci;"  develop a Transcript Application system with a multi-tabbed dashboard, user authentication, secure access to student records, payment processing, and an admin panel for managing applications.

1. Dashboard Structure:

Tabs on the Dashboard:
Tab 1: For students who remember their matric number.
Tab 2: For students who don’t remember their matric number (they will need to answer security questions for verification).
Tab 3: Displays the progress of the student’s application.
2. Application Process:

For Students who Remember Their Matric Number:

Students will enter their matric number to proceed.
System will verify the matric number against the database (students table).
If the matric number is valid, the system will fetch and display the student's details.
Student is prompted to confirm/update their email address and phone number.
The updated details are stored in the student_trans table.
Afterward, the student is redirected to the payment page.
For Students who Don’t Remember Their Matric Number:

Students will be asked to answer security questions that verify their identity (information will be matched against the students table and student_academics table).
If the security answers are correct, the system will fetch and display the student’s details.
Student is prompted to confirm/update their personal details (email and phone number).
The updated details are stored in the student_trans table.
Afterward, the student is redirected to the payment page.
3. Payment Page:

Application Type Dropdown:
Students can select the type of application (e.g., student copy, official transcript, etc.).
Based on the type of application, different payment options and forms will be displayed.
Types of Application:
Student Copy of Transcript (Physical Copy): Displays application fee and payment form.
Official Transcript: Students can select where to send the transcript (Email or Physical Copy).
If sending to another institution, a form will appear to input the institution’s email address.
If the transcript is to be sent physically to an institution, the system will provide different pricing and a form to complete the necessary details (for institutions within Nigeria and outside Nigeria).
Once the payment is completed, the application status will be updated.
4. Admin Panel:

Staff Login:
Admin staff will log in using their credentials (email and password) stored in the staff table.
Dashboard for Admin:
The admin dashboard will show various tabs such as:
List of all applied transcripts.
Detailed view of each application.
Status updates for each transcript request (e.g., payment status, verification status, etc.).
Backend Requirements:

Tables Needed:
students – Holds student personal details.
student_academics – Holds student academic data.
student_trans – Stores updated personal details and application statuses.
staff – Holds admin credentials (email, password).
Other related tables (payment transactions, application status, etc.).
Request Summary:

Frontend:

Multi-tab dashboard with the application process.
Payment page with different options based on application type.
Forms for updating details, including security questions for students who forgot their matric number.
Admin panel for managing applications.
Backend:

Secure student verification process.
Application fee processing.
Admin staff login and management system.
Database:

Create and manage required tables (students, student_academics, student_trans, staff, etc.).
Ensure secure handling of sensitive data (personal details, payment info, etc.)."
